<#@ template hostSpecific="true" language="C#" debug="True" #>

<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="System.Data.Linq" #>
<#@ assembly name="$(SolutionDir)\packages\EntityFramework.6.2.0\lib\net45\EntityFramework.dll" #>
<#@ assembly name="System.Windows.Forms" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="System.Runtime.Serialization" #>
<#@ assembly name="System.ServiceModel" #>
<#@ assembly name="$(SolutionDir)\ExternalDLLs\Microsoft.VisualStudio.Shell.dll" #>
<#@ assembly name="$(SolutionDir)\ExternalDLLs\Microsoft.VisualStudio.TextTemplating.Interfaces.10.0.dll" #>
<#@ assembly name="$(SolutionDir)\ExternalDLLs\Microsoft.VisualStudio.TextTemplating.VSHost.10.0.dll" #>
<#@ assembly name="$(SolutionDir)\ExternalDLLs\Microsoft.VisualStudio.TextTemplating.Modeling.10.0.dll" #>
<#@ assembly name="$(SolutionDir)\ExternalDLLs\CF.GN.BusinessObjects.dll" #>
<#@ assembly name="$(SolutionDir)\2. DL\CMT.DL\bin\$(ConfigurationName)\CMT.DL.dll" #>

<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ServiceModel" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ import namespace="System.Windows.Forms" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="CF.GN.BusinessObjects" #>
<#@ import namespace="CMT.DL" #>
<#@ import namespace="System.Data.Entity.Core.Objects.DataClasses" #>

<#
// <copyright file="Ent.tt" company="">
//  Copyright © . All Rights Reserved.
// </copyright>

string solutionDirectory = OutputManager.GetSolutionDirectory(this.Host);
string projectDirectory = Path.GetDirectoryName(Host.TemplateFile);
string autoGeneratedDirectoryName = "autogenerated";
string autoGeneratedDirectory = Path.Combine(projectDirectory, autoGeneratedDirectoryName);


if(!Directory.Exists(autoGeneratedDirectory))
{
	Directory.CreateDirectory(autoGeneratedDirectory);	
}
OutputManager outputManager = new OutputManager(this.Host);

var assembly = Assembly.GetAssembly(typeof(Country));
var types = assembly.GetTypes().Where(p=>p.BaseType != null && p.BaseType.Name == "EntityObject");

GenerateBaseInheritingBoClass(types);

		string boInheritedClassAutoFileName = Path.Combine(autoGeneratedDirectory, "DbObjectPartials.auto.cs");
		outputManager.SaveOutput(boInheritedClassAutoFileName, this.GenerationEnvironment);
#>
<#+
void GenerateBaseInheritingBoClass(IEnumerable<Type> types)
{
#>
// <autogenerated>
// This code was generated by a tool. Any changes made manually will be lost
// the next time this code is regenerated.
// </autogenerated>
 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using CMT.Common.Interfaces;

namespace CMT.DL
{    
	#region auto-generated code
	<#+ foreach(var t in types){
		var isIObject = t.GetProperties().Any(p=>p.Name == "ObjectId" && p.PropertyType == typeof(Guid));
		if(isIObject){
	#>
	public partial class <#= t.Name  #> : IDbObject <#= t.GetProperties().Any(p=>p.Name == "ChangeDate") ? ", IAuditableObject" : "" #> {}
	<#+	}
	} #>
		<#+ foreach(var t in types){
		var isIIntObject = t.GetProperties().Any(p=>p.Name == "ObjectId" && p.PropertyType == typeof(Int64));
		if(isIIntObject){
	#>
	public partial class <#= t.Name  #> : IDbIntObject <#= t.GetProperties().Any(p=>p.Name == "ChangeDate") ? ", IAuditableObject" : "" #> {}
	<#+	}
	} #>
	#endregion        
}
<#+
}
#>